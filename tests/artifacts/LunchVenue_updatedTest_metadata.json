{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "friendAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addFriend",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "addRestaurant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "beforeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "disableContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"name": "doVote",
				"outputs": [
					{
						"internalType": "bool",
						"name": "validVote",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "enableVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "friends",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "voted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getManager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVoteOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numFriends",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numRestaurants",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "restaurants",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sender",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "timeoutDuration",
						"type": "uint256"
					}
				],
				"name": "setTimeoutDuration",
				"outputs": [
					{
						"internalType": "bool",
						"name": "status",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddFriend",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddFriendFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddRestaurant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddRestaurantFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDisableContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDisableContractFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDoVote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDoVote2",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDoVote3",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDoVoteAfterVotingClosedFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDoVoteAsUnexistedFriendFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testEnableVoting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testEnableVotingFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testSetTimeoutDurationFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testTimeoutBlockNumber",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testVoteOpenAfterVotingClosed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testVotedRestaurant",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testsetTimeoutDuration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timeoutBlockNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "voteOpen",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votedRestaurant",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "votes",
				"outputs": [
					{
						"internalType": "address",
						"name": "voterAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "restaurant",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addFriend(address,string)": {
					"details": "The code checks duplication of friends,       it ensures friends can no longer be added once voting is open,      or when timeout is reached,       and it is restricted to manager only,      when contract is active",
					"params": {
						"friendAddress": "Friend's account/address",
						"name": "Friend's name"
					},
					"returns": {
						"_0": "Number of friends added so far"
					}
				},
				"addRestaurant(string)": {
					"details": "The code checks duplication of restaurants,       it ensures restaurants can no longer be added once voting is open,       or when timeout is reached,       and it is restricted to manager only,      when contract is active",
					"params": {
						"name": "Restaurant name"
					},
					"returns": {
						"_0": "Number of restaurants added so far"
					}
				},
				"disableContract()": {
					"details": "The code checks if contract is active,       and is restricted to manager only"
				},
				"doVote(uint256)": {
					"details": "The code ensures voting can only be done when voting is open,       and when timeout is not reached,       and when quorum is not reached,       and if contract is active",
					"params": {
						"restaurant": "Restaurant number being voted"
					},
					"returns": {
						"validVote": "Is the vote valid? A valid vote should be from a registered          friend to a registered restaurant"
					}
				},
				"enableVoting()": {
					"details": "The code checks if contract is active,       and is restricted to manager only"
				},
				"setTimeoutDuration(uint256)": {
					"details": "The code checks if contract is active,       and is restricted to manager only",
					"params": {
						"timeoutDuration": "Duration of voting process"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addFriend(address,string)": {
					"notice": "Add a new friend to voter list"
				},
				"addRestaurant(string)": {
					"notice": "Add a new restaurant"
				},
				"beforeAll()": {
					"notice": "'beforeAll' runs before all other tests More special functions are: 'beforeEach', 'beforeAll', 'afterEach' & 'afterAll'"
				},
				"disableContract()": {
					"notice": "Disable contract"
				},
				"doVote(uint256)": {
					"notice": "Vote for a restaurant"
				},
				"enableVoting()": {
					"notice": "Enable voting"
				},
				"setTimeoutDuration(uint256)": {
					"notice": "Set duration of voting"
				},
				"testAddFriend()": {
					"notice": "Add friends as manager #sender doesn't need to be specified explicitly for account-0"
				},
				"testAddFriendFailure()": {
					"notice": "Try adding friend as a user other than manager. This should fail"
				},
				"testAddRestaurant()": {
					"notice": "Add restaurants as manager When msg.sender isn't specified, default account (i.e., account-0) is the sender"
				},
				"testAddRestaurantFailure()": {
					"notice": "Try to add a restaurant as a user other than manager. This should fail this represents contract address which is not manager's address"
				},
				"testDisableContract()": {
					"notice": "Disable contract as manager When msg.sender isn't specified, default account (i.e., account-0) is the sender"
				},
				"testDisableContractFailure()": {
					"notice": "Try to disable contract as a user other than manager. This should fail"
				},
				"testDoVote()": {
					"notice": "Vote as Bob (acc1) #sender: account-1"
				},
				"testDoVote2()": {
					"notice": "Vote as Charlie #sender: account-2"
				},
				"testDoVote3()": {
					"notice": "Vote as Eve #sender: account-3"
				},
				"testDoVoteAfterVotingClosedFailure()": {
					"notice": "Verify voting after vote closed. This should fail"
				},
				"testDoVoteAsUnexistedFriendFailure()": {
					"notice": "Try voting as a user not in the friends list. This should fail"
				},
				"testEnableVoting()": {
					"notice": "Enable voting as manager When msg.sender isn't specified, default account (i.e., account-0) is the sender"
				},
				"testEnableVotingFailure()": {
					"notice": "Try to enable voting as a user other than manager. This should fail"
				},
				"testManager()": {
					"notice": "Check manager account-0 is the default account that deploy contract, so it should be the manager (i.e., acc0)"
				},
				"testSetTimeoutDurationFailure()": {
					"notice": "Try to set timeout duration as a user other than manager. This should fail this represents contract address which is not manager's address"
				},
				"testTimeoutBlockNumber()": {
					"notice": "Check timeout block number"
				},
				"testVoteOpenAfterVotingClosed()": {
					"notice": "Verify voting is closed after quorum met"
				},
				"testVotedRestaurant()": {
					"notice": "Verify lunch venue is set correctly after quorum met"
				},
				"testsetTimeoutDuration()": {
					"notice": "Set timeout duration block as manager When msg.sender isn't specified, default account (i.e., account-0) is the sender"
				}
			},
			"notice": "Inherit 'LunchVenue_updated' contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/LunchVenue_updated_test.sol": "LunchVenue_updatedTest"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/LunchVenue_updated.sol": {
			"keccak256": "0x22a68bba148e68eb473c792ff7b46c5cc8300fb5153e6ed0939fba51e7f80fb1",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://1d6f0db81a9866dcb3eb9a33b1e29c53197e7fac3582a3eb1f46f65b481c3e7d",
				"dweb:/ipfs/QmTZjJFVQjnEh2NJgD4ekBmMpFBGUCA4qW3iSyhK6HnNvh"
			]
		},
		"remix_accounts.sol": {
			"keccak256": "0xab088ffd1cd1033f54c2486f151b5d02281a3b76724c8e6f48479c25a4f7809e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5ddaf9976b1838f7028cbedfaf7f6e1cf8c898e100221176ff1406ee8b599f23",
				"dweb:/ipfs/QmX2FYLXYyo5Cn55ZX2CfngpscSh4mQhcMVzQdQsh2vqcG"
			]
		},
		"remix_tests.sol": {
			"keccak256": "0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e",
				"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7"
			]
		},
		"tests/LunchVenue_updated_test.sol": {
			"keccak256": "0x087d265bbd88e0a93fa49bc0c37589c8144e0cbcccf02c04a5245bf41373ae8c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://42088155475fb5377a75f9c2a75454c4e86530518047fa512c47d93a8578613a",
				"dweb:/ipfs/QmbEfsN5wfEsSQA9aCebZdnZKxYuSghFxHPueg4MHyaAVH"
			]
		}
	},
	"version": 1
}