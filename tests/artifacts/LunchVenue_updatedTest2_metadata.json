{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "beforeAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddExistedFriendFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddExistedRestaurantFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddFriendAfterContractDisable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddFriendAfterTimeoutReached",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddFriendAfterVotingOpenFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddRestaurantAfterContractDisable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddRestaurantAfterTimeoutReached",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testAddRestaurantAfterVotingOpenFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDoVoteAfterVotedFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testDoVoteUnexistedRestaurantFailure",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testEnableVotingAfterContractDisable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testVoteOpenAfterTimeoutReached",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"beforeAll()": {
					"notice": "'beforeAll' runs before all other tests More special functions are: 'beforeEach', 'beforeAll', 'afterEach' & 'afterAll'"
				},
				"testAddExistedFriendFailure()": {
					"notice": "Try to add an existed friend. This should fail"
				},
				"testAddExistedRestaurantFailure()": {
					"notice": "Try to add an existed restaurant. This should fail"
				},
				"testAddFriendAfterContractDisable()": {
					"notice": "Try adding a friend after contract disabled. This should fail"
				},
				"testAddFriendAfterTimeoutReached()": {
					"notice": "Try adding a friend after timeout reached. This should fail"
				},
				"testAddFriendAfterVotingOpenFailure()": {
					"notice": "Try adding a friend after voting open. This should fail"
				},
				"testAddRestaurantAfterContractDisable()": {
					"notice": "Try to add a restaurant after contract disabled. This should fail"
				},
				"testAddRestaurantAfterTimeoutReached()": {
					"notice": "Try to add a restaurant after timeout reached. This should fail"
				},
				"testAddRestaurantAfterVotingOpenFailure()": {
					"notice": "Try to add a restaurant after voting open. This should fail"
				},
				"testDoVoteAfterVotedFailure()": {
					"notice": "Try voting after voted. This should fail"
				},
				"testDoVoteUnexistedRestaurantFailure()": {
					"notice": "Try voting a restaurant not in the restaurants list. This should fail"
				},
				"testEnableVotingAfterContractDisable()": {
					"notice": "Try to enable voting after contract disabled. This should fail"
				},
				"testVoteOpenAfterTimeoutReached()": {
					"notice": "Verify voting is closed after timeout reached"
				}
			},
			"notice": "Inherit 'LunchVenue_updated' contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tests/LunchVenue_updated_test.sol": "LunchVenue_updatedTest2"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/LunchVenue_updated.sol": {
			"keccak256": "0x3f43dd55185fe389905c78a95057e95dac3c197fb58ba51726f34dafb288b6d6",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://0a75f4d270c240801d36515a016b047162676d395d99a0374f07544bf4459968",
				"dweb:/ipfs/QmeZmxz6fddQ46rU6P4coqVAZaWDcznTDrgzcKig3bP3bg"
			]
		},
		"remix_accounts.sol": {
			"keccak256": "0xab088ffd1cd1033f54c2486f151b5d02281a3b76724c8e6f48479c25a4f7809e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5ddaf9976b1838f7028cbedfaf7f6e1cf8c898e100221176ff1406ee8b599f23",
				"dweb:/ipfs/QmX2FYLXYyo5Cn55ZX2CfngpscSh4mQhcMVzQdQsh2vqcG"
			]
		},
		"remix_tests.sol": {
			"keccak256": "0xe2783cdc204cba8c72494119339f1d90f9022b15d6c718c668b7f097d8e29787",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb6a22e64c7f16bcaab63b1c1a1b269d5be8a6d37bdd9dec1718477ab916b18e",
				"dweb:/ipfs/QmdkW1tT5iadBvaHMCoskhDGZKnfdg8o1D9CcoQYtdJet7"
			]
		},
		"tests/LunchVenue_updated_test.sol": {
			"keccak256": "0xc14fba4d504b9bef844a713fa33ccab509701ac14509733f0964c41e00bd348c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e8b580335f8fde4daca2bd68f05f753a387b9c578dcabb74de30ab52fc678ec7",
				"dweb:/ipfs/Qmc2vUoMFYdiYpeHgqm5gri8Bbvt9PYjXH42iYappqc8QN"
			]
		}
	},
	"version": 1
}